db.complianceAction.remove({"name":"亚信安全防毒墙网络版客户端"})
db.complianceAction.save({
  "_id" : ObjectId("5fadfac7c0062500060b4283"),
  "category" : 1,
  "name" : "亚信安全防毒墙网络版客户端",
  "templateName" : "White-Software",
  "param" : [{
      "softwareId" : null,
      "softwareName" : "亚信安全防毒墙网络版客户端",
      "softwareVersion" : null,
      "softwarePackage" : {
        "name" : "oscam111132.exe",
        "desc" : null,
        "adapterSys" : "win",
        "param" : null,
        "adapterNum" : "bit32",
        "packageType" : "unknown"
      }
    }, {
      "softwareId" : null,
      "softwareName" : "亚信安全防毒墙网络版客户端",
      "softwareVersion" : null,
      "softwarePackage" : {
        "name" : "oscam111164.exe",
        "desc" : null,
        "adapterSys" : "win",
        "param" : null,
        "adapterNum" : "bit64",
        "packageType" : "unknown"
      }
    }],
  "isTip" : false,
  "tipMessage" : "",
  "script" : "Function White-Software{\r\n\tparam([String] $hostUrl,\r\n\t\t[String] $softwareName,\r\n\t\t[String] $softwareVersion64,\r\n\t\t[String] $fileName64,\r\n\t\t[String] $softwareVersion32,\r\n\t\t[String] $fileName32,\r\n\t\t[bool] $silent=$false\r\n\t)\r\n\tFunction Keep-AliveForAsia{\r\n\t\t$processName='PccNTMon'\r\n\t\tForeach($startFileTmp in \"$($env:SystemDrive)\\Program Files (x86)\\Asiainfo Security\\OfficeScan Client\\PccNTMon.exe\",\"$($env:SystemDrive)\\Program Files\\Asiainfo Security\\OfficeScan Client\\PccNTMon.exe\"){\r\n\t\t\tIf(Test-Path $startFileTmp){\r\n\t\t\t\tIf(ps $processName -ErrorAction SilentlyContinue){Return 'Service is already running'+$(Ret-Success)}\r\n\t\t\t\tIf(gsv SWIserv -ErrorAction SilentlyContinue){\t\t\t\t\t\r\n\t\t\t\t\tReturn OperatorSoftwareBySWI $hostUrl $startFileTmp $silent;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tReturn 'The startupFile of Asiatic was not found'\r\n\t}\r\n\tIf([String]::isNullOrEmpty($softwareName)){Return \"BusinessException:softwareName can not empty\"}\r\n\tIf([String]::isNullOrEmpty($hostUrl)){Return \"BusinessException:hostUrl can not empty\"}\r\n\tIf([String]::isNullOrEmpty($fileName64) -and [String]::isNullOrEmpty($fileName32)){Return \"BusinessException:install package can not empty\"}\r\n\t\r\n\t$downloadPath = Join-Path $env:SystemDrive '/Program Files/Ruijie Networks/softwarePackage/';\r\n\tIf(!(Test-Path $downloadPath)){mkdir $downloadPath -Force|Out-Null}\r\n\tIf([IntPtr]::Size -eq 4){\r\n\t\tIf([String]::isNullOrEmpty($fileName32)){Return Ret-Success \"no installation package32 available, default and pass\"}\r\n\t\t$softwareVersion=$softwareVersion32;\r\n\t\t$bit='bit32';\r\n\t\t$fileName=$fileName32\r\n\t}Else{\r\n\t\tIf([String]::isNullOrEmpty($fileName64)){Return Ret-Success \"no installation package64 available, default and pass\"}\r\n\t\t$softwareVersion=$softwareVersion64;\r\n\t\t$bit='bit64';\r\n\t\t$fileName=$fileName64;\r\n\t}\r\n\r\n\t$ret=Keep-AliveForAsia\r\n\tIf(Is-Success $ret){Return $ret}$ret\r\n\t\r\n\t$softwarePath = Join-Path $downloadPath $fileName;\r\n\tIf(!(Test-Path \"$softwarePath\") -or (cat \"$softwarePath\" -TotalCount 1) -eq $null){\r\n\t\t$tmp=Handle-SpecialCharactersOfHTTP \"?fileName=$fileName&dir=win/$bit\"\r\n\t\t$remoteSoftwarePath=$hostUrl+'/temp'+$tmp;\r\n\t\t$Res=Download-File \"$remoteSoftwarePath\" \"$softwarePath\";\"$Res\";\r\n\t\tIf(!(Is-Success $Res)){Return}\r\n\t}\r\n\t\r\n\t$file=ls $softwarePath;\r\n\tIf($null -ne (ps|?{$_.name -eq $file.baseName -And ($_.path -eq $null -Or $_.path -eq $softwarePath)})){Return \"$($file.name) is Installing\"}\r\n\t\r\n\tIf('.msi' -eq $file.Extension){\r\n\t\tIf($silent){\r\n\t\t\t$null=iex \"& cmd /c `'msiexec.exe /i `\"$softwarePath`\"`' /norestart /qn ADVANCED_OPTIONS=1 CHANNEL=100\"  -ErrorAction SilentlyContinue\r\n\t\t}Else{\r\n\t\t\t$null=iex \"& cmd /c `'msiexec.exe /i `\"$softwarePath`\"`' ADVANCED_OPTIONS=1 CHANNEL=100\"  -ErrorAction SilentlyContinue\r\n\t\t}\r\n\t\tIf(!$?){Return Print-Exception \"Msiexec /i `\"$softwarePath`\" /norestart /qn\"}\r\n\t}else{\r\n\t\t$Res=OperatorSoftwareBySWI $hostUrl $softwarePath $silent;\"$Res\";\r\n\t\tIf(!(Is-Success $Res)){Return}\r\n\t}\r\n\tIf((Get-SoftwareInfoByNameVersion $softwareName $softwareVersion) -eq $null){Return \"BusinessException:Installation of the software has not been successful\"}\r\n\tKeep-AliveForAsia\r\n};Function Set-Processd([String]$processName,[bool]$isRun,[String]$startFile,[bool]$isClear=$false){\r\n\t$business=\"[Set-Processd $processName]=>>\"\r\n\tIf([String]::isNullOrEmpty($processName)){\r\n\t\tReturn \"${business}BusinessException:processName can not empty\"\r\n\t}\r\n\t$pro=Get-Process $processName -ErrorAction SilentlyContinue\r\n\tIf($isRun){\r\n\t\tIf($pro -ne $null){\r\n\t\t\tReturn \"${business}No Need Operator%%SMP:success\"\r\n\t\t}\r\n\t\tIf([String]::isNullOrEmpty($startFile)){\r\n\t\t\tReturn \"${business}BusinessException:To start a process, The process startFile cannot be empty\"\r\n\t\t}\r\n\t\t\r\n\t\tIf(!(Test-Path $startFile)){\r\n\t\t\tReturn \"${business}BusinessException:[$startFile] does not exist,cannot start process\"\r\n\t\t}\r\n\t\t\r\n\t\tStart-Process $startFile\r\n\t\tIf(!$?){Return Print-Exception \"${business}Start-Process $startFile\"}\r\n\t\tReturn Ret-Success $business\r\n\t}Else{\r\n\t\tIf($pro -eq $null){\r\n\t\t\tIf($isClear){\r\n\t\t\t\tIf([String]::isNullOrEmpty($startFile)){\r\n\t\t\t\t\tReturn \"${business}BusinessException:To clean up a process, The process startFile cannot be empty\"\r\n\t\t\t\t}\r\n\t\t\t\trm -Force $startFile -ErrorAction SilentlyContinue\r\n\t\t\t\tIf(!$?){Return Print-Exception \"${business}rm -Force $startFile\"}\r\n\t\t\t}\r\n\t\t\tReturn \"${business}No Need Operator%%SMP:success\"\r\n\t\t}\r\n\t\t\r\n\t\t$pro|Foreach{\r\n\t\t\tStop-Process $_.Id -Force -ErrorAction SilentlyContinue\r\n\t\t\tIf(!$?){Return Print-Exception \"Stop-Process $_.Id -Force\"}\r\n\t\t}\r\n\t\tSleep 1\r\n\t\t$pro=Get-Process $processName -ErrorAction SilentlyContinue\r\n\t\tIf($pro -ne $null){\r\n\t\t\tReturn \"${business}BusinessException:Failed to terminate process\"\r\n\t\t}\r\n\t\t\r\n\t\tIf($isClear){\r\n\t\t\tIf([String]::isNullOrEmpty($startFile)){\r\n\t\t\t\tReturn \"${business}BusinessException:To start a process, The process startFile cannot be empty\"\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tIf(!(Test-Path $startFile)){\r\n\t\t\t\tReturn \"${business}BusinessException:[$startFile] does not exist,cannot start process\"\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\trm -Force $startFile -ErrorAction SilentlyContinue\r\n\t\t\tIf(!$?){Return Print-Exception \"rm -Force $startFile\"}\r\n\t\t}\r\n\t\tReturn Ret-Success $business\r\n\t}\r\n};Function Ret-Success([String] $business){\r\n\tReturn \"$business%%SMP:success\"\r\n};Function Is-Success($Ret){\r\n\tIf($Ret -ne $null -And ($Ret|Select -Last 1).EndsWith('%%SMP:success')){Return $True}\r\n\tReturn $False\r\n};Function Print-Exception([String]$command){\r\n\tReturn \"execute Command [$command] Exception,The Exception is $($error[0])\"\r\n};Function Download-File([String]$src,[String]$des,[bool]$isReplace=$false){\r\n\tIf([String]::IsNullOrEmpty($src)){Return \"BusinessException:Source file does not exist\"}\r\n\tIf([String]::IsNullOrEmpty($des)){Return \"BusinessException:Destination address cannot be empty\"}\r\n\t$res=Check-DownloadFileIsComplete $des\r\n\tIf($res.isComplete){Return Ret-Success \"Download-File:No Need Operator\"}\r\n\twhile (Test-FileLocked $des){\r\n\t\tsleep 1\r\n\t\tIf($i++ -gt 1){Return \"File [$des] is in use\"}\r\n\t}\r\n\tTry{\r\n\t\t$web=New-Object System.Net.WebClient\r\n\t\t$web.Encoding=[System.Text.Encoding]::UTF8\r\n\t\t$web.DownloadFile(\"$src\", \"$des\")\r\n\t\tIf(!(Test-Path $des) -or (Get-Content \"$des\" -totalcount 1) -eq $null){Return \"BusinessException:The downloaded file does not exist or the content is empty\"}\r\n\t\tIf([String]::IsNullOrEmpty($res.endFilePath)){$res=Check-DownloadFileIsComplete $des}\r\n\t\tNew-Item -Path $res.endFilePath -ItemType \"file\"|Out-Null\r\n\t}Catch{Return Print-Exception \"$web.DownloadFile($src,$des)\"}\r\n\tReturn Ret-Success \"Download-File\"\r\n};Function Test-FileLocked([string]$FilePath) {\r\n    try {[IO.File]::OpenWrite($FilePath).close();$false}catch{$true}\r\n};Function Check-DownloadFileIsComplete($FilePath){\r\n\t$isComplete=$false\r\n\tIf(Test-Path $FilePath){\r\n\t\t$file=gi $FilePath\r\n\t\t$endFilePath=Join-Path $file.DirectoryName \"$($file.basename)_end\"\r\n\t\t$isComplete=Test-Path $endFilePath\r\n\t}\r\n\tReturn New-Object PSObject -Property @{isComplete=$isComplete;endFilePath=$endFilePath;filePath=$FilePath}\r\n};Function Get-SoftwareInfoByNameVersion([String] $name,[String] $version){\r\n\t$Key='Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall','SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall';\r\n\tIf([IntPtr]::Size -eq 8){$Key+='SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall'}\r\n\tForeach($_ In $Key){\r\n\t  $Hive='LocalMachine';\r\n\t  If('Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall' -ceq $_){$Hive='CurrentUser'}\r\n\t  $RegHive=[Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($Hive,$env:COMPUTERNAME);\r\n\t  $RegKey=$RegHive.OpenSubKey($_);\r\n\t  If([string]::IsNullOrEmpty($RegKey)){Continue}\r\n\t  $arrs=$RegKey.GetSubKeyNames();\r\n\t  Foreach($_ In $arrs){\r\n\t\t$SubKey=$RegKey.OpenSubKey($_);\r\n\t\t$tmp=$subkey.GetValue('DisplayName');\r\n\t\tIf(![string]::IsNullOrEmpty($tmp)){\r\n\t\t\t$tmp=$tmp.Trim();\r\n\t\t\tIf($tmp.gettype().name -eq 'string' -And $tmp -like $name){\r\n\t\t\t\t$DisplayVersion=$subkey.GetValue('DisplayVersion');\r\n\t\t\t\tIf(![string]::IsNullOrEmpty($version) -and $version -notlike $DisplayVersion){Continue}\r\n\t\t\t\t$retVal=''|Select 'DisplayName','DisplayVersion','UninstallString','InstallLocation','RegPath','InstallDate','InstallSource';\r\n\t\t\t\t$retVal.DisplayName=$subkey.GetValue('DisplayName');\r\n\t\t\t\t$retVal.DisplayVersion=$DisplayVersion;\r\n\t\t\t\t$retVal.UninstallString=$subkey.GetValue('UninstallString');\r\n\t\t\t\t$retVal.InstallLocation=$subkey.GetValue('InstallLocation');\r\n\t\t\t\t$retVal.RegPath=$subkey.GetValue('RegPath');\r\n\t\t\t\t$retVal.InstallDate=$subkey.GetValue('InstallDate');\r\n\t\t\t\t$retVal.InstallSource=$subkey.GetValue('InstallSource');\r\n\t\t\t\tReturn $retVal;\r\n\t\t\t}\r\n\t\t}\r\n\t\t$SubKey.Close()\r\n\t  };\r\n\t  $RegHive.Close()\r\n\t};\r\n};Function OperatorSoftwareBySWI([String]$hostUrl,[String]$softwarePath,$isSilent=$True){\r\n\tIf([String]::IsNullOrEmpty(\"$softwarePath\")){\r\n\t\tReturn \"uninstall script not exist\"\r\n\t}\r\n\tIf($softwarePath.StartsWith('\"')){$softwarePath=$softwarePath.substring(1,$softwarePath.LastIndexOf('\"')-1).trim()}\r\n\tIf(!$softwarePath.EndsWith(\".exe\") -And !$softwarePath.EndsWith(\".exe`\"\")){\r\n\t\tReturn \"uninstall script format error[$softwarePath]\"\r\n\t}\r\n\t\r\n\t$business=\"[OperatorSoftwareBySWI:$softwarePath]=>>\"\r\n\t$SWIDir=Join-Path $env:SystemRoot 'System32'\r\n\tIf(!(Test-Path $SWIDir)){\r\n\t\tmkdir $SWIDir -Force|Out-Null;\r\n\t\tIf(!$?){Return Print-Exception \"${business}mkdir $SWIDir -Force|Out-Null\"}\r\n\t}\r\n\t\r\n\tIf([IntPtr]::Size -eq 8){$SWIFileName='SWIService64.exe'}Else{$SWIFileName='SWIService.exe'}\r\n\t$SWIPath=Join-Path $SWIDir $SWIFileName\r\n\tIf(!(Check-DownloadFileIsComplete $SWIPath).isComplete){\r\n\t\tIf([String]::IsNullOrEmpty($hostUrl)){Return \"When downloading the installation package, the host address cannot be empty\"}\r\n\t\t$remoteexePath=\"$hostUrl/$SWIFileName\"\r\n\t\t$Res=Download-File \"$remoteexePath\" \"$SWIPath\";\"$business$Res\"\r\n\t\tIf(!(Is-Success $Res)){Return}\r\n\t}\r\n\t\r\n\tIf(!$isSilent){$p=''}Else{$p='/s'}\r\n\t$SWIServiceName='SWIserv';\r\n\tRestart-Service $SWIServiceName -ErrorAction SilentlyContinue;\r\n\tIf(!$?){\r\n\t\tTry{\r\n\t\t\tIf((gsv -Name $SWIServiceName -ErrorAction SilentlyContinue) -ne $null){sc.exe delete $SWIServiceName}\r\n\t\t\tcd $SWIDir;\r\n\t\t\tiex \".\\$SWIFileName  -install -ErrorAction Stop\"\r\n\t\t}Catch{\r\n\t\t\tPrint-Exception \"${business}Restart-Service -Name $SWIServiceName\"\r\n\t\t\tIf($p){start $softwarePath -ArgumentList @($p) -ErrorAction SilentlyContinue}Else{start $softwarePath -ErrorAction SilentlyContinue}\r\n\t\t\tIf(!$?){Return Print-Exception \"start $softwarePath -ArgumentList @($p)\"}Else{Ret-Success $business}\r\n\t\t}\r\n\t}\r\n\t \r\n\tspsv -Name $SWIServiceName -ErrorAction SilentlyContinue;\r\n\tIf(!$?){Return Print-Exception \"${business}spsv -Name $SWIServiceName\"}\r\n\t\r\n\tTry{\r\n\t\t(gsv -Name $SWIServiceName).Start(\"{`\"exe`\":`\"$softwarePath`\",`\"arg`\":`\"$p`\"}\")\r\n\t}Catch{\r\n\t\tReturn Print-Exception \"${business}(gsv -Name $SWIServiceName).Start(\"+'\"{`\"exe`\":'+\"$softwarePath\"+',`\"arg`\":`\"/s`\"}\")'\r\n\t}\r\n\tReturn Ret-Success $business\r\n};Function Handle-SpecialCharactersOfHTTP([String] $Characters){\r\n\tIf([String]::IsNullOrEmpty($Characters)){\r\n\t\tReturn $Null;\r\n\t}\r\n\t#[空格:%20 \":%22 #:%23 %:%25 &用%26 +:%2B ,:%2C /:%2F ::%3A ;:%3B <:%3C =:%3D >:%3E ?:%3F @:%40 \\:%5C |:%7C]\r\n\tReturn $Characters.replace(' ','%20').replace('+','%2B').replace('/','%2F').replace('(','%28').replace(')','%29')\r\n}\r\n$sourceStr='White-Software \"http://172.17.8.218:9888//nodeManager/file/download/\" \"\\u4e9a\\u4fe1\\u5b89\\u5168\\u9632\\u6bd2\\u5899\\u7f51\\u7edc\\u7248\\u5ba2\\u6237\\u7aef\" \"\" \"oscam111164.exe\" \"\" \"oscam111132.exe\"'\r\n$matchEvaluator={\r\n        param($v)\r\n        [char][int]($v.Value.replace('\\u','0x'))\r\n}\r\n$wq=[regex]::Replace($sourceStr,'\\\\u[0-9-a-f]{4}',$matchEvaluator)\r\nInvoke-Expression $wq",
  "creator" : "admin",
  "_version_" : "0",
  "createTime" :new Date(),
  "lastModifiedTime" :new Date(),
  "_class" : "com.ruijie.authentication.authnode.domain.compliance.ComplianceAction"
})